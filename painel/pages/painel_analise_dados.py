import streamlit as st
import pandas as pd
import numpy as np
import wfdb
import os
import glob
import time
import neurokit2 as nk
import plotly.express as px
import matplotlib.pyplot as plt

# T√≠tulo do aplicativo
st.title("üìä Dados de Eletrocardiograma (ECG)")

# Definir caminho para os arquivos
path = r'D:\Projeto_Tese_mestrado\02_Dataset\dados_ECG\High-resolution_ECG\P0*'

# Usando glob para obter todos os arquivos correspondentes
arquivos = glob.glob(path)
arquivos = [os.path.splitext(arquivo)[0] for arquivo in arquivos]  # Removendo extens√µes

# Criar um DataFrame com os arquivos
df = pd.DataFrame(arquivos, columns=['caminho'])
df = df[df.duplicated()]
df['ultimo_nome'] = df['caminho'].apply(lambda x: os.path.basename(x))

# Selecionar ID do paciente
id_selecionado = st.selectbox('üìå **Selecione um Paciente:**', df['ultimo_nome'])

# Filtrar os dados
df_filtrado = df[df['ultimo_nome'] == id_selecionado]

# Carregar o arquivo selecionado
record = wfdb.rdrecord(df_filtrado.iloc[0, 0])

# Criando abas
aba1, aba2, aba3, aba4 = st.tabs(['üìã Informa√ß√£o', 'üìä Dados X', 'üìä Dados Y', 'üìä Dados Z'])

# Aba de Informa√ß√µes
with aba1:
    col1, col2 = st.columns(2)
    with col1:
        st.write("üìå **Nome do Registro:** ", record.record_name)
        st.write("üìå **N¬∫ de Sinais:** ", record.n_sig)
        st.write("üìå **Frequ√™ncia de Amostragem:** ", record.fs)
        st.write("üìå **Comprimento do Sinal:** ", record.sig_len)
        st.write("üìå **Arquivo(s):** ", record.file_name)
        st.write("üìå **Unidade de Medida:** ", record.units)
        st.write("üìå **Resolu√ß√£o do ADC:** ", record.adc_res)
        st.write("üìå **Ponto Zero do ADC:** ", record.adc_zero)

# Bot√£o para carregar os dados X
with aba2:
    if 'sinal_x' not in st.session_state:  # Verifica se os dados n√£o est√£o armazenados
        if st.button("üîÑ Carregar Dados X"):
            with st.spinner("Carregando os dados X... üîç"):
                sinal_x = record.p_signal[:, 0]
                resultado_x, _ = nk.ecg_process(sinal_x, sampling_rate= record.fs , method='neurokit')
                st.plotly_chart(px.line(resultado_x[1000:2000], x=resultado_x.index[0:1000], y = 'ECG_Clean'))

                # Armazenar os dados no session_state para evitar rec√°lculo
                st.session_state.sinal_x = sinal_x
                st.session_state.resultado_x = resultado_x
                st.session_state.ecg = sinal_x[0:98000].copy()

                signals = pd.DataFrame({
                    "ECG_Raw" : st.session_state.ecg,
                    "ECG_NeuroKit" : nk.ecg_clean(st.session_state.ecg, sampling_rate=1000, method="neurokit"),
                    "ECG_BioSPPy" : nk.ecg_clean(st.session_state.ecg, sampling_rate=1000, method="biosppy"),
                    "ECG_PanTompkins" : nk.ecg_clean(st.session_state.ecg, sampling_rate=1000, method="pantompkins1985"),
                    "ECG_Hamilton" : nk.ecg_clean(st.session_state.ecg, sampling_rate=1000, method="hamilton2002"),
                    "ECG_Elgendi" : nk.ecg_clean(st.session_state.ecg, sampling_rate=1000, method="elgendi2010"),
                    "ECG_EngZeeMod" : nk.ecg_clean(st.session_state.ecg, sampling_rate=1000, method="engzeemod2012"),
                    "ECG_VG" : nk.ecg_clean(st.session_state.ecg, sampling_rate=1000, method="vg"),
                    "ECG_TC" : nk.ecg_clean(st.session_state.ecg, sampling_rate=1000, method="templateconvolution")
                })
                
                fig, ax = plt.subplots()
                signals.plot(subplots=True, ax=ax)  # Criar gr√°fico no Matplotlib
                st.pyplot(fig)  # Exibir no Streamlit

                #st.line_chart(signals.plot(subplots=True))
        else:
            st.warning("Clique no bot√£o acima para carregar os dados X.")
    else:
        # Caso os dados j√° estejam no session_state, exibe o gr√°fico
        st.plotly_chart(px.line(st.session_state.resultado_x[0:1000], x=st.session_state.resultado_x.index[0:1000], y='ECG_Clean'))
        fig, ax = plt.subplots()
        signals.plot(subplots=True, ax=ax)  # Criar gr√°fico no Matplotlib
        st.pyplot(fig)  # Exibir no Streamlit

# Bot√£o para carregar os dados Y (seguindo a mesma l√≥gica do X)
with aba3:
    if 'sinal_y' not in st.session_state:
        if st.button("üîÑ Carregar Dados Y"):
            with st.spinner("Carregando os dados Y... üîç"):
                if record.n_sig > 1:
                    sinal_y = record.p_signal[:, 1]  # Extrai o sinal Y
                    
                    # Processa o sinal como no X
                    resultado_y, _ = nk.ecg_process(sinal_y, sampling_rate=record.fs, method='neurokit')
                    
                    # Exibe gr√°fico interativo
                    st.plotly_chart(px.line(resultado_y[1000:2000], x=resultado_y.index[0:1000], y='ECG_Clean'))
                    
                    # Armazena no session_state
                    st.session_state.sinal_y = sinal_y
                    st.session_state.resultado_y = resultado_y
                else:
                    st.error("Apenas um sinal dispon√≠vel!")
        else:
            st.warning("Clique no bot√£o acima para carregar os dados Y.")
    else:
        # Exibe gr√°fico se os dados j√° estiverem carregados
        st.plotly_chart(px.line(st.session_state.resultado_y[1000:2000], x=st.session_state.resultado_y.index[0:1000], y='ECG_Clean'))

# Bot√£o para carregar os dados Z 
with aba4:
    if 'sinal_z' not in st.session_state:
        if st.button("üîÑ Carregar Dados Z"):
            with st.spinner("Carregando os dados Z... üîç"):
                if record.n_sig > 2:
                    sinal_z = record.p_signal[:, 2]  # Extrai o sinal Z
                    
                    # Processa o sinal como no X e Y
                    resultado_z, _ = nk.ecg_process(sinal_z, sampling_rate=record.fs, method='neurokit')
                    
                    # Exibe gr√°fico interativo
                    st.plotly_chart(px.line(resultado_z[1000:2000], x=resultado_z.index[0:1000], y='ECG_Clean'))
                    
                    # Armazena no session_state
                    st.session_state.sinal_z = sinal_z
                    st.session_state.resultado_z = resultado_z
                else:
                    st.error("Apenas dois sinais dispon√≠veis!")
        else:
            st.warning("Clique no bot√£o acima para carregar os dados Z.")              
    else:
        # Exibe gr√°fico se os dados j√° estiverem carregados
        st.plotly_chart(px.line(st.session_state.resultado_z[1000:2000], x=st.session_state.resultado_z.index[0:1000], y='ECG_Clean'))
